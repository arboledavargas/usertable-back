enum FieldType {
  TEXT
  NUMBER
  DATE
  BOOLEAN
}

type Organization {
  id: String!
  name: String!
}

type CustomerFormField {
  id: String!
  fieldName: String!
  type: FieldType!
}

type CustomerFormFieldValue {
  id: String!
  customerId: String!
  customerFormFieldId: String!
  value: String!
}

type Customer {
  id: String!
  properties: [CustomerFormFieldValue!]!
}

type Owner {
  id: String!
  name: String!
  email: String!
  organization: Organization!
}

input CustomerFiltersInput {
  filters: [Filter!]!
}

input Filter {
  fieldId: String!
  value: String!
}

input CustomerFormFieldInput {
  fieldName: String!
  type: FieldType!
}

input OrganizationInput {
  name: String!
  userMail: String!
  userName: String!
}

type CreateCustomerFormFieldPayload {
  customerFormField: CustomerFormField
  success: Boolean!
  message: String
}

type CreateOrganizationPayload {
  organization: Organization
  success: Boolean!
  message: String
}

type DeleteCustomerPayload {
  success: Boolean!
  message: String
}

type Query {
  filterCustomers(filter: CustomerFiltersInput!): [Customer!]!
  searchCustomers(searchText: String!): [Customer!]!
  getOrganizationCustomerFormFields(organizationId: String!): [CustomerFormField!]!
  owner: Owner
}

type Mutation {
  createCustomerFormField(input: CustomerFormFieldInput!): CreateCustomerFormFieldPayload!
  deleteCustomer(userId: String!): DeleteCustomerPayload!
  createOrganization(input: OrganizationInput!): CreateOrganizationPayload
}

schema {
  query: Query
  mutation: Mutation
}