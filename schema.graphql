enum FieldType {
  TEXT
  NUMBER
  DATE
  BOOLEAN
}

type Organization {
  id: String!
  name: String!
}

type UserFormField {
  id: String!
  fieldName: String!
  type: FieldType!
}

type UserFormFieldValue {
  id: String!
  userId: String!
  userFormFieldId: String!
  value: String!
}

type User {
  id: String!
  properties: [UserFormFieldValue!]!
}

type Owner {
  id: String!
  name: String!
  email: String!
  organization: Organization!
}

input UserFiltersInput {
  filters: [Filter!]!
}

input Filter {
  fieldId: String!
  value: String!
}

input UserFormFieldInput {
  fieldName: String!
  type: FieldType!
}

input OrganizationInput {
  name: String!
  userMail: String!
  userName: String!
}

type CreateUserFormFieldPayload {
  userFormField: UserFormField
  success: Boolean!
  message: String
}

type CreateOrganizationPayload {
  organization: Organization
  success: Boolean!
  message: String
}

type DeleteUserPayload {
  success: Boolean!
  message: String
}

type Query {
  users(filter: UserFiltersInput!): [User!]!
  searchUsers(searchText: String!): [User!]!
  organizationFormFields(organizationId: String!): [UserFormField!]!
  owner: Owner
}

type Mutation {
  createUserFormField(input: UserFormFieldInput!): CreateUserFormFieldPayload!
  deleteUser(userId: String!): DeleteUserPayload!
  createOrganization(input: OrganizationInput!): CreateOrganizationPayload
}

schema {
  query: Query
  mutation: Mutation
}